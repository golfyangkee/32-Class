# 3) 상속관계를 통해서 후손을 통한 객체를 생성하고 후손의 객체를 통해서 [생성자 구문을 확인하고]
#    선조의 메소드와 후손의 메소드를 자유롭게 호출할 수 있다.
#    생성자를 통해서 값 전달을 해보자. 선조(a)
# << 후손 객체 생성 시 값을 받아 선조의 생성자에게 값 전달하면서 객체를 생성한다. >>
class 선조:       #
    def __init__(self,a,b):     # 4. a=100, b=200 을 선조의 생성자(지역번수)를 통해 전달 받는다.
        self.a=100              # 멤버변수 self.a에 지역변수 값 전달한다.
        self.b=200              # 멤버변수 self.b에 지역변수 값 전달한다.
    def prn(self):
        print("선조의 Prn")
class 후손(선조):
    def __init__(self,a,b):     # 2. 지역변수가 a=100, b=200 을 받는다.
        super().__init__(a,b)   # 3. 선조의 생성자에서 100,200을 a,b,라는 변수를 통해 전달한다.
    def my_print(self):
        print("후손의 my_print")
        print("상속된 선조의 변수 a:", self.a)
        print("상속된 선조의 변수 b:", self.b)

if __name__ == '__main__':
    print("=========3. 후손을 통해 생성자와 선조의 메소드를 호출해보자.")
    a1=후손(100,200)  # 1. 후손 클래스의 생성자로 값을 전달
    a1.prn()       # 상속된 메소드 호출
    a1.my_print()   # 후손의 메소드 호출

'''
    a2=후손(400,500)
    a2.prn()       # 상속된 메소드 호출
    a2.my_print()   # 후손의 메소드 호출
'''