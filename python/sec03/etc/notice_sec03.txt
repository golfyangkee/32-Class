1) 변수 영역 : 함수의 영역 (LEGB)로 변수를 구분하는 영역, 변수의 유효범위와 충돌방지, 영역이 서로 독립적
    -Local(지역) : 함수 내부에 선언된 변수, 함수 내에서만 접근이 가능
    -Enclosing(비지역, 중첩) : 중첩함수의 경우 내부 함수가, 외부함수의 변수에 접근이 가능; innerfun() / outerfun()
    -Global(전역) : 함수 외부에 선언된 변수, 모듈(py) 안에 모든 함수가 접근 가능하다.
    -Built-in(내장) : 재정의 할 수 없는 고정 함수로 python 언어 자체에 내장된 변수와 함수
    * 만일 LEGB 영역에 없으면 'NameError'가 발생된다. a_function.py
    -Traceback 이라는 모듈이 따로 있고 메서드가 따로 있다. 이거는 또 다른 모듈이다 오류가 나면 왜 오류가 났는지 쫒아다니는 아이
    - 기능별 스코프 영역대로 접을 수 있다.
2) 속성 : 내장 모듈의 특수 속성
'__name__' : 현재 모듈의 이름을 나타내는 속성, 직접 실행되는 경우에는 __main__으로 설정된다.
    ex) if __name__ == '__main__':
        직접 실행한 현재 모듈(a_function.py)인지, 임포트한 모듈인지를 확인할 수 있다.
        호출해서 가져오면 main 이 아니라 호출해서 가져오게 되는거지 main에 있는 건 아니다.
'__doc__' : 모듈, 클래스(속성+메서드), 함수 등 Document String 을 나타내는 속성, ''', """ 이걸로 둘려쌓여있는 애들은 다 Document String이라고 한다.
            -> help()를 통해서 확인
'__spec__' : 파이썬 3.3부터 도입, 임포트 스펙 설정해주는 설정, 모듈의 import 스펙 저장
            -> 모듈을 임포트하면 모듈의 로드와 어떻게 실행했는지 실행의 정보를 포함
            -> 'importlib' 모듈과 함께 사용할 수 있다. 네임도 있고 정보도 있고 로케이션 정보도 있고 상속관계 속성도 쫘악 있다.
            -> 모듈의 실행정보 포함한다고 했으니까 로딩 및 실행, 실행의 동작을 제어하고 추가하는 메타 정보 기능
            ex) 메타는 자기 자신이 아닌 누군가를 꾸며주는 아이이다.
            예를 들면 HTML 에서 <i>abc</i> 이거는 abc를 이탤릭으로 바꾸겠다는 건데 <><>이거는 메타태그 메타프로퍼티 메타컴피그 메타파일 이런게 있는데
            메타가 들어가면 정보를 가지고 있거나 누군가를 꾸며주는 애들, 속성 가면 어트리뷰트 쫙 나오는 그런거?
            >>> import importlib.metadata : 모듈의 메타정보, 동적으로 모듈을 제어하면서 로드할 때 __spec__ 속성을 설정해서 동작을 제어한다.
            >>> dir(importlib.metadata)

3) 자유 변수(Free Variable)
    - def add(a):
        return a+b+c    # b 와 c는 정의되지 않아서 자유변수임 함수 내에서 참조는 되지만, 함수 내에서 정의되지 않은 변수

    - def outer(): p.156
        x=10
        def inner():    --> inner함수가 x 자유변수를 기억하는 클로저임, outer 함수가 호출된 뒤에도 자유변수를 기억하고 있다.
            return x    --> inner함수 입장에서는 x가 정의되지 않아서 참조만 하고 자유변수임
        return inner

 exaM 01)f_lambda.py -> 함수로 만들자
      02)g_lambda.py -> 함수로 만들자

4) 고차함수 : 함수의 매개인자를 함수로 받거나 함수로 리턴하는 원형을 가진 함수
        람다, 추상적인 기술로 리턴하는 로직을 사용할 때
  <고차함수 대표함수> : 고차함수(함수, something) 이면 고차함수
   이터레이블 시퀀스 자료형을 함수에 넣고 모았다가 리턴
        -map(func, *iterables) --> map object  : 매개인자로 받은 시퀀스객체를 함수를 통해 새로운 시쿼스로 리턴
        -filter(function or None(필터링한 조건함수), iterable) --> filter object : 매개인자로 받은 시퀀스객체를 함수의 조건 결과 리턴
        무조건 매개함수가 제한이 있어야 하고 조건이 트루여야 한다. 조건에 따라 개수가 바뀜
        -reduce(function(누적값의 계산결과 리턴함수), iterable[, initial]) -> value : 왼쪽에서 오른쪽 순차 시퀀스 데이터를 함수를 통해 단일 값으로 리턴


 수업 방식
 전 시간에 배운고 복습
 코드가 있으면 pdf 갔다가 코드 복습
 암기 수업이 아니라서 exam을 만들어서 단문해보고
 많이 들어가면 과제로 하고
 과제가 안 좋으면 수업 내용 부족한거 확인하고